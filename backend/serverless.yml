service:
  name: todo-serverless

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

custom:
  todosTable: TodoItems-${self:provider.stage}
  todosIndex: TodoItemsIndex
  todosTableArn: arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.todosTable}
  serverless-iam-roles-per-function:
    defaultInherit: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    ATTACHMENTS_S3_BUCKET: todo-serverless-attachments-6ad7-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    TODOS_TABLE: ${self:custom.todosTable}
    TODOS_INDEX: ${self:custom.todosIndex}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTelemetryRecords
        - xray:PutTraceSegments
      Resource: '*'

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
    environment:
      AUTH0_JWKS_URL: https://dev-lhbo4v8l.eu.auth0.com/.well-known/jwks.json

  UpdateTodoAttachment:
    handler: src/lambda/s3/attachment.handler
    events:
      - s3:
          bucket: ${self:provider.environment.ATTACHMENTS_S3_BUCKET}
          event: s3:ObjectCreated:*
          existing: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: ${self:custom.todosTableArn}
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: ${self:custom.todosTableArn}/index/${self:custom.todosIndex}

  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          authorizer: Auth
          cors: true
          request:
            schema:
              application/json: ${file(requests/create-todo-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: ${self:custom.todosTableArn}

  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          authorizer: Auth
          cors: true
          request:
            schema:
              application/json: ${file(requests/update-todo-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: ${self:custom.todosTableArn}

  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: ${self:custom.todosTableArn}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    TodosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.todosTable}
        LocalSecondaryIndexes:
          - IndexName: ${self:custom.todosIndex}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENTS_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    AttachmentsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: AttachmentsBucketPolicy
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: '*'
              Action: s3:GetObject
              Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*
        Bucket: !Ref AttachmentsBucket
